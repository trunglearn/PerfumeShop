// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(uuid())
  name           String?
  email          String      @unique
  image          String?     @db.Text
  hashedPassword String?
  role           Role        @default(USER)
  gender         Gender?
  dob            DateTime?
  phone          String?
  address        String?
  isVerified     Boolean?    @default(false)
  status         UserStatus?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  feedback Feedback[]
  cart     Cart[]
  order    Order[]
  post     Post[]
}

model Account {
  id            String  @id @default(uuid())
  userId        String
  refresh_token String? @db.Text
  access_token  String? @db.Text
  expires_at    String?
  token_type    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  SELLER
  MARKETER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  NEWLY_REGISTER
  NEWLY_BOUGHT
  BANNED
}

enum Gender {
  MALE
  FEMALE
}

model Product {
  id             String  @id @default(uuid())
  name           String
  brandId        String
  original_price Int
  discount_price Int?
  quantity       Int     @default(0)
  sold_quantity  Int     @default(0)
  description    String? @db.Text
  size           Int?
  categoryId     String
  thumbnail      String? @db.Text
  rating         Float   @default(0)
  isShow         Boolean @default(true)
  isFeatured     Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  brand    Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  product_image ProductImage[]

  feedback Feedback[]
  cart     Cart[]

  @@index([brandId, categoryId])
}

model Brand {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product[]
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product[]
  post    Post[]
}

model ProductImage {
  id        String @id @default(uuid())
  url       String @db.Text
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Slider {
  id                    String  @id @default(uuid())
  title                 String
  note                  String? @db.Text
  image                 String  @db.Text
  isShow                Boolean
  backlink              String  @db.Text
  titleTextColor        String?
  noteTextColor         String?
  backgroundSliderColor String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  briefInfo   String? @db.Text
  thumbnail   String? @db.Text
  isShow      Boolean @default(true)
  userId      String
  categoryId  String
  isFeatured  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([categoryId])
}

enum SLIDER_STATUS {
  SHOW
  HIDE
}

model Feedback {
  id          String  @id @default(uuid())
  description String? @db.Text
  userId      String
  productId   String
  rating      Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  image FeedbackImage[]

  @@index([userId, productId])
}

model FeedbackImage {
  id         String @id @default(uuid())
  url        String @db.Text
  feedbackId String

  feedback Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)

  @@index([feedbackId])
}

model Cart {
  id        String @id @default(uuid())
  quantity  Int    @default(1)
  userId    String
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, productId])
}

model Order {
  id            String       @id @default(uuid())

  userId        String
  address       String
  name          String
  gender        Gender
  email         String
  phoneNumber   String
  
  status        ORDER_STATUS @default(PENDING)
  totalAmount   Int
  notes         String?      @db.Text
  paymentMethod PAYMENT_TYPE @default(CASH_ON_DELIVERY)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderDetail OrderDetail[]

  @@index([userId])
}

enum PAYMENT_TYPE {
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum ORDER_STATUS {
  PENDING
  CONFIRMED
  DELIVERING
  DELIVERED
  CANCELED
}

model OrderDetail {
  id String @id @default(uuid())

  quantity      Int
  originalPrice Int
  discountPrice Int?
  totalPrice    Int

  thumbnail String @db.Text
  brand     String
  size      Int
  category  String

  productId   String
  productName String

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}
